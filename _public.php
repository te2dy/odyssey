<?php
/**
 * Origine Mini, a minimalist them for Dotclear.
 *
 * @copyright Teddy
 * @copyright GPL-3.0
 */

namespace themes\origine_mini;

use dcCore;

if (!defined('DC_RC_PATH')) {
  return;
}

\l10n::set(dirname(__FILE__) . '/locales/' . \dcCore::app()->lang . '/main');

\dcCore::app()->tpl->addValue('origineConfigActive', [__NAMESPACE__ . '\tplOrigineMiniTheme', 'origineConfigActive']);
\dcCore::app()->tpl->addValue('origineMiniStylesInline', [__NAMESPACE__ . '\tplOrigineMiniTheme', 'origineMiniStylesInline']);
\dcCore::app()->tpl->addValue('origineMiniEntryLang', [__NAMESPACE__ . '\tplOrigineMiniTheme', 'origineMiniEntryLang']);
\dcCore::app()->tpl->addValue('origineMiniFooterCredits', [__NAMESPACE__ . '\tplOrigineMiniTheme', 'origineMiniFooterCredits']);
\dcCore::app()->tpl->addValue('origineMiniURIRelative', [__NAMESPACE__ . '\tplOrigineMiniTheme', 'origineMiniURIRelative']);

\dcCore::app()->tpl->addBlock('origineMiniWidgetsNav', [__NAMESPACE__ . '\tplOrigineMiniTheme', 'origineMiniWidgetsNav']);
\dcCore::app()->tpl->addBlock('origineMiniWidgetsExtra', [__NAMESPACE__ . '\tplOrigineMiniTheme', 'origineMiniWidgetsExtra']);
\dcCore::app()->tpl->addBlock('origineMiniFooter', [__NAMESPACE__ . '\tplOrigineMiniTheme', 'origineMiniFooter']);

class tplOrigineMiniTheme
{
  /**
   * Checks if the plugin origineConfig is installed and activated.
   *
   * @return bool Returns true if the plugin is installed and activated.
   */
  public static function origineConfigActive()
  {
    if (\dcCore::app()->plugins->moduleExists('origineConfig') === true && \dcCore::app()->blog->settings->origineConfig->active === true) {
      return true;
    } else {
      return false;
    }
  }

  /**
   * Adds styles in the head.
   * 
   * If origineConfig is activated, it returns custom styles generated by it;
   * otherwise, default styles are returned.
   * 
   * @return string The styles.
   */
  public static function origineMiniStylesInline()
  {
    $plugin_activated = self::origineConfigActive();

    if ($plugin_activated === false) {
      $styles  = '<style>';
      $styles .= ':root{';
      $styles .= '--color-h:220;';
      $styles .= '--page-width:30em;';
      $styles .= '--font-family:-apple-system,BlinkMacSystemFont,"Avenir Next",Avenir,"Segoe UI","Helvetica Neue",Helvetica,Ubuntu,Roboto,Noto,Arial,sans-serif;';
      $styles .= '--font-size:1em;';
      $styles .= '--order-content:2;';
      $styles .= '--order-widgets-nav:3;';
      $styles .= '--order-widgets-extra:4;';
      $styles .= '--order-footer:5;';
      $styles .= '--text-align:left;';
      $styles .= '}';
      $styles .= '</style>';

      return $styles;
    } else {
      if (\dcCore::app()->blog->settings->origineConfig->css !== '') {
        return '<style>' . \dcCore::app()->blog->settings->origineConfig->css . '</style>';
      }
    }
  }

  /**
   * Displays a lang attribute and its value when the language of the current post is different
   * from the language defined for the whole blog.
   * 
   * @return void
   */
  public static function origineMiniEntryLang()
  {
    return '<?php if (\dcCore::app()->ctx->posts->post_lang !== \dcCore::app()->blog->settings->system->lang) { echo " lang=" . dcCore::app()->ctx->posts->post_lang; } ?>';
  }

  /**
   * Credits to display at the bottom of the site.
   * 
   * They can be remove with the plugin origineConfig.
   * 
   * @return void
   */
  public static function origineMiniFooterCredits()
  {
    return '<div class=site-footer-block>' . sprintf(__('Powered by <a href=%s>Dotclear</a> and <a href=%s>Origine Mini</a>'), __('https://dotclear.org/'), 'https://github.com/te2dy/origine-mini') . '</div>';
  }

  /**
   * Returns the relative URI of the current page.
   * 
   * @return void
   */
  public static function origineMiniURIRelative()
  {
    return $_SERVER['REQUEST_URI'];
  }

  /**
   * Displays navigation widgets.
   * 
   * @param array $attr    Unused.
   * @param void  $content The content of the widget area.
   * 
   * @return void The navigation widget.
   */
  public static function origineMiniWidgetsNav($attr, $content)
  {
    $plugin_activated = self::origineConfigActive();

    if ($plugin_activated === false || ($plugin_activated === true && \dcCore::app()->blog->settings->origineConfig->widgets_nav_position !== 'disabled')) {
      return $content;
    }
  }

  /**
   * Displays extra widgets.
   * 
   * @param array $attr    Unused.
   * @param void  $content The content of the widget area.
   * 
   * @return void The navigation widget.
   */
  public static function origineMiniWidgetsExtra($attr, $content)
  {
    $plugin_activated = self::origineConfigActive();

    if ($plugin_activated === false || ($plugin_activated === true && \dcCore::app()->blog->settings->origineConfig->widgets_extra_enabled === true)) {
      return $content;
    }
  }

  /**
   * Displays the footer.
   * 
   * @param array $attr    Unused.
   * @param void  $content The content of the footer.
   * 
   * @return void The footer.
   */
  public static function origineMiniFooter($attr, $content)
  {
    $plugin_activated = self::origineConfigActive();

    if ($plugin_activated === false || ($plugin_activated === true && \dcCore::app()->blog->settings->origineConfig->footer_enabled === true)) {
      return $content;
    }
  }
}
